// AUTOGENERATED FILE
// This file was generated from bitwise.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface BitwiseActionDict<T> extends BaseActionDict<T> {
  Script?: (this: NonterminalNode, arg0: IterationNode) => T;
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  DirectiveExp?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  StructExp?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode, arg5: NonterminalNode, arg6: IterationNode, arg7: IterationNode, arg8: IterationNode, arg9: TerminalNode) => T;
  FieldExp?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode) => T;
  FieldDefinitionExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FieldMaskDefinitionExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FieldMaskDefinitionListExp?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  comment?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  multiLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  multiLineCommentChars?: (this: NonterminalNode, arg0: IterationNode) => T;
  singleLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  singleLineCommentChars?: (this: NonterminalNode, arg0: IterationNode) => T;
  singleLineCommentChar?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  directiveToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  hexaddress?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  offset?: (this: NonterminalNode, arg0: IterationNode) => T;
  length?: (this: NonterminalNode, arg0: IterationNode) => T;
  hexdigit?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  fieldName?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  typeToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  lineTerminator?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface BitwiseSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: BitwiseActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: BitwiseActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: BitwiseActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: BitwiseActionDict<T>): this;
}

export interface BitwiseGrammar extends Grammar {
  createSemantics(): BitwiseSemantics;
  extendSemantics(superSemantics: BitwiseSemantics): BitwiseSemantics;
}

declare const grammar: BitwiseGrammar;
export default grammar;

